/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/* three table records
3 acidity headache red spots on skin joints pain fatigue vomiting
2 shortness of breath wheezing coughing chest tightness chest pain headache
2 fever pale stools vomiting abdominal pain fatigue
*/




import com.datastax.driver.core.Cluster;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Row;
import com.datastax.driver.core.Session;
import com.datumbox.opensource.classifiers.NaiveBayes;
import com.datumbox.opensource.dataobjects.NaiveBayesKnowledgeBase;
import com.datumbox.opensource.examples.NaiveBayesExample;
import static com.datumbox.opensource.examples.NaiveBayesExample.readLines;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.Reader;
import java.net.URL;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author user
 */
public class HomePage extends javax.swing.JFrame {

    /**
     * Creates new form HomePage
     */
      public static String[] readLines(URL url) throws IOException {

        Reader fileReader = new InputStreamReader(url.openStream(), Charset.forName("UTF-8"));
        List<String> lines;
        try (BufferedReader bufferedReader = new BufferedReader(fileReader)) {
            lines = new ArrayList<>();
            String line;
            while ((line = bufferedReader.readLine()) != null) {
                lines.add(line);
            }
        }
        return lines.toArray(new String[lines.size()]);
    }
      
    public HomePage() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        btnDetect = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        txtSym1 = new javax.swing.JTextField();
        txtSym2 = new javax.swing.JTextField();
        txtSym3 = new javax.swing.JTextField();
        txtSym4 = new javax.swing.JTextField();
        txtSym5 = new javax.swing.JTextField();
        txtSym6 = new javax.swing.JTextField();
        txtNoOfDays = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 153, 204));
        jLabel1.setText("Please Enter Symptoms");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 204));
        jLabel2.setText("Disease Detector");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Symptom 2");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Symptom 1");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Symptom 3");

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Symptom 4");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Symptom 5");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Symptom 6");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("No Of Days");

        btnDetect.setText("DETECT");
        btnDetect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetectActionPerformed(evt);
            }
        });

        btnReset.setText("RESET");

        txtSym1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSym1ActionPerformed(evt);
            }
        });

        txtSym3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSym3ActionPerformed(evt);
            }
        });

        txtNoOfDays.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNoOfDaysActionPerformed(evt);
            }
        });

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(121, 121, 121))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(154, 154, 154))))
            .addGroup(layout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(jButton1)
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(txtSym1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtSym2)
                                    .addComponent(txtSym3, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(txtSym5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                .addComponent(txtSym4, javax.swing.GroupLayout.Alignment.LEADING)))
                        .addGap(142, 142, 142))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 74, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtNoOfDays, javax.swing.GroupLayout.DEFAULT_SIZE, 168, Short.MAX_VALUE)
                                    .addComponent(txtSym6)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(47, 47, 47)
                                .addComponent(btnDetect)
                                .addGap(57, 57, 57)
                                .addComponent(btnReset)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtSym1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSym2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtSym3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSym4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtSym5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(txtSym6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(txtNoOfDays, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDetect)
                    .addComponent(btnReset)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetectActionPerformed
        // TODO add your handling code here:
        
        //loginSession=cluster.connect("project");
            //loginSession.execute("use project");
        
        
        // File operation 
        /* File f = new File("D:\\\\Adb project\\\\NaiveBayesClassifier-master\\\\resources\\\\datasets\\\\sampleEng.txt");
        if (f.exists())
            {
  //delete if exists
                      f.delete();
            }
        FileWriter out = new FileWriter(f); 
        out.write(strEnglish);
        
        if (f.exists())
            {
  //delete if exists
                      f.delete();
            }
        out = new FileWriter(f);
        out.write(strFrench);
       
        
        
        out.close();  */
         
         //NaiveBayes nb2 = new NaiveBayes();    
        
            String str[] = new String[3];
            str[0]="asthma.txt";
            str[1]="chikenpox.txt";
            str[2]="jaundice.txt";
            int strCounter =0;
            
            
            Map<String, URL> trainingFiles = new HashMap<>();
//loading examples in memory 
            Cluster cluster;
            Session loginSession;
            cluster=Cluster.builder().addContactPoint("localhost").build();
            loginSession=cluster.connect("project");
            String selectQuery3 = "SELECT * from Mapping";
            String selectQuery4 = "SELECT * from Symptom";
            ResultSet rs3 = loginSession.execute(selectQuery3);
            String s_name,record;
            String[] strArray = new String[7];
            String disease_id=""; 
            File f=null;
            FileWriter out = null;
            boolean flag = false;
           // f = new File("D:\\Adb project\\NaiveBayesClassifier-master\\resources\\datasets\\sampleEng.txt");
            //f = new File("D:\\\\Adb project\\\\NaiveBayesClassifier-master\\\\resources\\\\datasets\\\\sampleEng.txt");
            for(Row rowobject : rs3){
                 
             try {
                  f = new File("D:\\adb project files\\NaiveBayesClassifier-master\\resources\\datasets\\"+str[strCounter]);
                  if (f.exists())
                 {
                     //delete if exists
                     f.delete();
                 } 
                 /*  if (f.exists())
                  {
                     //delete if exists
                     f.delete();
                  } */
                  /*  if(flag==false){
                     flag=true;
                 }
                 else{
                    f = new File("D:\\Adb project\\NaiveBayesClassifier-master\\resources\\datasets\\sampleEng.txt"); 
                 }
                 if (f.exists())
                 {
                     //delete if exists
                     f.delete();
                 } 
                 */
                 out = new FileWriter(f);
                 disease_id = rowobject.getString("d_id");
                 strArray[0]= rowobject.getString("sym1");
                 strArray[1] = rowobject.getString("sym2");
                 strArray[2] = rowobject.getString("sym3");
                 strArray[3] = rowobject.getString("sym4");
                 strArray[4] = rowobject.getString("sym5");
                 strArray[5] = rowobject.getString("sym6");
                 strArray[6] = rowobject.getString("day_id");
                 
                //fetching names using ids 
                  loginSession.execute(selectQuery4);
                 
                 
                 record =" "+strArray[6]+" "+strArray[0]+" "+strArray[1]+" "+strArray[2]+" "+strArray[3]+" "+strArray[4]+" "+strArray[5];
                 System.out.println(disease_id+" "+strArray[0]+" "+strArray[1]+" "+strArray[6]);
                 for(int i=0;i<30;i++){
                     out.write(record);
                 }
                 
                 out.flush();
                 trainingFiles.put(disease_id, NaiveBayesExample.class.getResource("/datasets/"+str[strCounter]));       
                 strCounter++;
             } catch (IOException ex) {
                 Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
             } finally {
                 
             }
                
            }
          try {
              out.close();
          } catch (IOException ex) {
              Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
          }

            
            Map<String, String[]> trainingExamples = new HashMap<>();
            for(Map.Entry<String, URL> entry : trainingFiles.entrySet()) {
             try {
                 trainingExamples.put(entry.getKey(), readLines(entry.getValue()));
             } catch (IOException ex) {
                 Logger.getLogger(HomePage.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
           // Iterator<Row> rows = rs.iterator();
            //boolean flag = false;
            String disease,s1,s2,s3,s4,s5,s6,n;   // n is no of days
       
       
        /*strArray[0] = "I";
        strArray[1] = "am";
        strArray[2] = "English";
        trainingEx.put("English", strArray); */
        //Row rowobject;
         
    
           NaiveBayes nb = new NaiveBayes();
            nb.setChisquareCriticalValue(0.01); //0.01 pvalue
            nb.train(trainingExamples);
       
               //get trained classifier knowledgeBase
          
        NaiveBayesKnowledgeBase knowledgeBase2 = nb.getKnowledgeBase();
        
        nb = null;
        trainingExamples = null;
         String sym1 = txtSym1.getText();
        String sym2 = txtSym2.getText();
        String sym3 = txtSym3.getText();
        String sym4 = txtSym4.getText();
        String sym5 = txtSym5.getText();
        String sym6 = txtSym6.getText();
        String noOfDays = txtNoOfDays.getText();
        int nOfDays = Integer.parseInt(txtNoOfDays.getText());
        if(nOfDays<10){
            noOfDays = "1";
        }
        else if(nOfDays>10 && nOfDays<30){
            noOfDays = "2";
        }
        else{
            noOfDays = "3";
        }
        
         String selectQuery2 = "SELECT * from Symptom";
         ResultSet rs2 = loginSession.execute(selectQuery2);
        // Iterator<Row> rows2 = rs.iterator();
         String symptomsIdList="";
         String sym_name, s_id2;
         symptomsIdList=noOfDays;
            for(Row rowobject2 : rs2){
           
               //rowobject2 = rows.next();
               s_id2 = rowobject2.getString("s_id"); 
               sym_name  = rowobject2.getString("s_name");
               
                if(sym_name.equals(sym1) || sym_name.equals(sym2) || sym_name.equals(sym3) || sym_name.equals(sym4) || sym_name.equals(sym5) || sym_name.equals(sym6)){
                       symptomsIdList+=" "+sym_name;
                       //   s5+=" "+s1";
                       System.out.println(symptomsIdList);
                        //System.out.println(rowobject2.getString("s_id"));
                }
               
            }   
         
       
        //Use classifier
        nb = null;    
        nb = new NaiveBayes(knowledgeBase2);
       // String exampleEn = symptomsIdList;
        String outputEn = nb.predict(symptomsIdList);
        System.out.println(symptomsIdList);
        System.out.format("The sentense \"%s\" was classified as \"%s\".%n", symptomsIdList, outputEn);
        
        
        // Display detected disease and recommend doctor
         String selectQuery5 = "select * from doctor";
        ResultSet rs5 = loginSession.execute(selectQuery5);
       //search  doctor record
        String doct_name="";
        String doct_address="";
        String d_id="";
        for(Row rowobject :  rs5){
           d_id = rowobject.getString("d_id");
           if(d_id.equalsIgnoreCase(outputEn)){
               doct_name = rowobject.getString("doct_name");
                doct_address = rowobject.getString("doc_address");
           }
            
        } 
        //search for disease name from obtained disease id
        String selectQuery6 = "select * from Disease";
        ResultSet rs6 = loginSession.execute(selectQuery6);
        String dis_id="",disease_name="";
        for(Row rowobject :  rs6){
           dis_id = rowobject.getString("d_id");
           if(dis_id.equalsIgnoreCase(outputEn)){
               disease_name = rowobject.getString("d_name");
           }
            
        } 
        
       JOptionPane.showMessageDialog(rootPane, "Disease Detected: \n"+disease_name+"\n\nRecommended Dotor Details: \n"+"Doctor Name: "+doct_name+"\nDoctor Address: "+doct_address);
        
        
        cluster.close();
        
        this.setVisible(false);
        new OptionPage().setVisible(true);
             //Access data from form 
          
       
       
        //trainingEx.put("French", "Je suis Français");
        //trainingEx.put("German","Ich bin Deutsch");
      /*  Map<String, String[]> trainingExamples = new HashMap<>();
        
        for(Map.Entry<String, URL> entry : trainingFiles.entrySet()) {
            trainingExamples.put(entry.getKey(), readLines(entry.getValue()));
        }
        */
        //train classifier
        
        
        
      
        
      /**  String exampleFr = "Je suis Français";
        String outputFr = nb.predict(exampleFr);
        System.out.format("The sentense \"%s\" was classified as \"%s\".%n", exampleFr, outputFr);
         
        String exampleDe = "Ich bin Deutsch";
        String outputDe = nb.predict(exampleDe);
        System.out.format("The sentense \"%s\" was classified as \"%s\".%n", exampleDe, outputDe);
     */
           
    }//GEN-LAST:event_btnDetectActionPerformed

    private void txtSym1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSym1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSym1ActionPerformed

    private void txtSym3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSym3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSym3ActionPerformed

    private void txtNoOfDaysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNoOfDaysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNoOfDaysActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new OptionPage().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
       
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        
            public void run() {
                
                new HomePage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetect;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTextField txtNoOfDays;
    private javax.swing.JTextField txtSym1;
    private javax.swing.JTextField txtSym2;
    private javax.swing.JTextField txtSym3;
    private javax.swing.JTextField txtSym4;
    private javax.swing.JTextField txtSym5;
    private javax.swing.JTextField txtSym6;
    // End of variables declaration//GEN-END:variables
}


/*
public class NaiveBayesExample {

    /**
     * Reads the all lines from a file and places it a String array. In each 
     * record in the String array we store a training example text.
     * 
     * @param url
     * @return
     * @throws IOException 
     */
/*   
    
    /**
     * Main method
     * 
     * @param args the command line arguments
     * @throws java.io.IOException
     */
/*    public static void main(String[] args) throws IOException {
        //map of dataset files
        trainingFiles.put("French", NaiveBayesExample.class.getResource("/datasets/training.language.fr.txt"));
        trainingFiles.put("German", NaiveBayesExample.class.getResource("/datasets/training.language.de.txt"));
        
        //loading examples in memory
        
        
        //train classifier
        NaiveBayes nb = new NaiveBayes();
        nb.setChisquareCriticalValue(0.01); //0.01 pvalue
        nb.train(trainingExamples);
        
        //get trained classifier knowledgeBase
        NaiveBayesKnowledgeBase knowledgeBase = nb.getKnowledgeBase();
        
        nb = null;
        trainingExamples = null;
        
        
        //Use classifier
        nb = new NaiveBayes(knowledgeBase);
        String exampleEn = "I am English";
        String outputEn = nb.predict(exampleEn);
        System.out.format("The sentense \"%s\" was classified as \"%s\".%n", exampleEn, outputEn);
        
        String exampleFr = "Je suis FranÃ§ais";
        String outputFr = nb.predict(exampleFr);
        System.out.format("The sentense \"%s\" was classified as \"%s\".%n", exampleFr, outputFr);
        
        String exampleDe = "Ich bin Deutsch";
        String outputDe = nb.predict(exampleDe);
        System.out.format("The sentense \"%s\" was classified as \"%s\".%n", exampleDe, outputDe);
        

    }
    
}

*/